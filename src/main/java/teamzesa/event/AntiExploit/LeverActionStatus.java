package teamzesa.event.AntiExploit;

import teamzesa.entity.LeverActionUser;
import teamzesa.entity.User;

import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

public class LeverActionStatus {
    private static class LeverActionStatusHolder {
        private static final LeverActionStatus INSTANCE = new LeverActionStatus();
    }

    private final ConcurrentHashMap<User, LeverActionUser> leverActionUsers;

    public LeverActionStatus() {
        this.leverActionUsers = new ConcurrentHashMap<>();
    }

    public static LeverActionStatus getLeverActionStatus() {
        return LeverActionStatusHolder.INSTANCE;
    }

    public boolean userExist(User user) {
        return Optional.ofNullable(this.leverActionUsers.get(user)).isPresent();
    }

    public void addLeverActionEvent(User user, long actionTime) {
        this.leverActionUsers.put(user,new LeverActionUser(actionTime,false));
    }

    public boolean isActionLever(User user) {
        return this.leverActionUsers.get(user).permission();
    }

    public void removeStatus(User user) {
        this.leverActionUsers.remove(user);
    }
}
